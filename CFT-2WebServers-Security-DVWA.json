{
  "AWSTemplateFormatVersion": "2010-09-09",

 "Description": "This will deploy 2 Ubuntu HTTP servers instance to use with DVWA: Damn Vulnerable Web Application. The instance deployed is a Ubuntu 16.04 LTS - Xenial HVM; please MAKE SURE YOU ACCEPTED THE TERMS FOR THIS INSTANCE BEFORE LAUNCHING THIS STACK. ENFORCE A USER IP, DO NOT LET THIS FULLY EXPOSED TO INTERNET ",

 "Parameters": {
   "VPC" : {
     "Description" : "Existing VPC to use",
     "Type" : "AWS::EC2::VPC::Id",
     "ConstraintDescription": "must be the name of an existing VPC."
   },
   "Subnet" : {
       "Description" : "Existing subnet in the VPC",
       "Type" : "AWS::EC2::Subnet::Id",
       "ConstraintDescription": "must be the name of an existing subnet."
     },
   "InstanceType": {
     "Description": "Ubuntu instance type",
     "Type": "String",
     "Default": "t2.small",
     "AllowedValues": [
       "t2.small",
       "t2.medium",
       "m3.medium",
       "m3.large"
     ],
     "ConstraintDescription": "must be a valid EC2 instance type."
   },
   "EBSVolumeSize": {
       "Description": "The size of the EBS volume for the instance",
       "Type": "String",
       "Default": "40"
   },
   "KeyName": {
     "Description": "Name of an existing EC2 KeyPair to enable SSH to the instance",
     "Type": "AWS::EC2::KeyPair::KeyName",
     "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
   },
   "UserIP": {
       "Description": " The IP address range that can be used to access the Jump Server using RDP.",
       "Type": "String",
       "MinLength": "9",
       "MaxLength": "18",
       "Default": "0.0.0.0/0",
       "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
       "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
     }
 },
 "Metadata" : {
   "AWS::CloudFormation::Interface" : {
     "ParameterGroups" : [
       {
         "Label" : { "default" : "Network Configuration" },
         "Parameters" : [ "VPC", "Subnet", "UserIP" ]
       },
       {
         "Label" : { "default":"Amazon EC2 Configuration" },
         "Parameters" : [ "InstanceType", "EBSVolumeSize", "KeyName" ]
       }
     ],
     "ParameterLabels" : {
       "VPCID" : { "default" : "Which VPC should this be deployed to?" }
     }
   }
 },
 "Mappings": {
   "AWSInstanceType2Arch": {
     "t2.small"    : { "Arch" : "HVM64" },
     "t2.medium"   : { "Arch" : "HVM64" },
     "m3.medium"   : { "Arch" : "HVM64" },
     "m3.large"    : { "Arch" : "HVM64" }
   },
   "AWSRegionArch2AMI": {
     "us-east-1"        : {"HVM64" : "ami-b391b9c8", "Note": "(N. Virginia)   Ubuntu 16.04 LTS - Xenial (HVM)"},
     "us-west-2"        : {"HVM64" : "ami-9d04e4e5", "Note": "(Oregon)        Ubuntu 16.04 LTS - Xenial (HVM)"},
     "us-west-1"        : {"HVM64" : "ami-8edbf0ee", "Note": "(N. California) Ubuntu 16.04 LTS - Xenial (HVM)"},
     "us-east-2"        : {"HVM64" : "ami-a7aa8ac2", "Note": "(Ohio) Ubuntu 16.04 LTS - Xenial (HVM)"},
     "ca-central-1"     : {"HVM64" : "ami-b3cf71d7", "Note": "(Canada - Central) Ubuntu 16.04 LTS - Xenial (HVM)"},
     "eu-west-1"        : {"HVM64" : "ami-016f9e78", "Note": "(Ireland)       Ubuntu 16.04 LTS - Xenial (HVM)"},
     "eu-west-2"        : {"HVM64" : "ami-fde6f799", "Note": "(London)       Ubuntu 16.04 LTS - Xenial (HVM)"},
     "eu-central-1"     : {"HVM64" : "ami-9c1db3f3", "Note": "(Frankfurt)     Ubuntu 16.04 LTS - Xenial (HVM)"},
     "ap-southeast-1"   : {"HVM64" : "ami-e8da418b", "Note": "(Singapore)     Ubuntu 16.04 LTS - Xenial (HVM)"},
     "ap-northeast-1"   : {"HVM64" : "ami-aae114cc", "Note": "(Tokyo)         Ubuntu 16.04 LTS - Xenial (HVM)"},
     "ap-southeast-2"   : {"HVM64" : "ami-49b3aa2a", "Note": "(Sydney)        Ubuntu 16.04 LTS - Xenial (HVM)"},
     "sa-east-1"        : {"HVM64" : "ami-7ad8ae16", "Note": "(Sao Paulo)     Ubuntu 16.04 LTS - Xenial (HVM)"},
     "ap-northeast-2"   : {"HVM64" : "ami-d24e97bc", "Note": "(Seoul)     Ubuntu 16.04 LTS - Xenial (HVM)"},
     "cn-northwest-1"   : {"HVM64" : "NOT_SUPPORTED"}
   }
 },
 "Resources": {
   "InstanceSecurityGroup": {
     "Type": "AWS::EC2::SecurityGroup",
     "Properties": {
       "VpcId": {
         "Ref": "VPC"
       },
       "GroupDescription": "Enable remote access via port SSH (22) and HTTP (80)",
       "SecurityGroupIngress": [
         {
           "IpProtocol": "icmp",
           "FromPort": "-1",
           "ToPort": "-1",
           "CidrIp": { "Ref": "UserIP" }
         },
         {
           "IpProtocol": "tcp",
           "FromPort": "22",
           "ToPort": "22",
           "CidrIp": { "Ref": "UserIP" }
         },
         {
           "IpProtocol": "tcp",
           "FromPort": "80",
           "ToPort": "80",
           "CidrIp": { "Ref": "UserIP" }
         }
       ]
     }
   },
   "WebServerDVWA1": {
     "Type": "AWS::EC2::Instance",
     "Metadata": {
       "AWS::CloudFormation::Init" : {
         "config": {
           "commands" : {
             "a_update_host": { "command": "apt-get -y update"},
             "b_setup_ubuntu_password": { "command": "sh -c 'echo \"ubuntu:supernetops\" | chpasswd'"},
             "c_setup_docker1": {"command": "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"},
             "c_setup_docker2": {"command": "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\""},
             "c_setup_docker3": {"command": "sudo apt-get -y update"},
             "c_setup_docker4": {"command": "sudo apt-get install -y docker-ce"},
             "c_setup_docker5": {"command": "usermod -aG docker ubuntu"} ,
             "d_run_docker_dvwa": {"command": "docker run -d --rm -p 80:80 vulnerables/web-dvwa"}
             }
         }
       }
     },
     "Properties": {
       "ImageId": {
        "Fn::FindInMap": [
          "AWSRegionArch2AMI",
          {
            "Ref": "AWS::Region"
          },
          {
            "Fn::FindInMap": [
              "AWSInstanceType2Arch",
              {
                "Ref": "InstanceType"
              },
              "Arch"
             ]
          }
         ]
       },
       "InstanceType": {
         "Ref": "InstanceType"
       },
       "BlockDeviceMappings" : [{
               "DeviceName" : "/dev/sda1",
               "Ebs" : {"VolumeSize" : {"Ref" : "EBSVolumeSize"}}
       }],
       "KeyName": {
         "Ref": "KeyName"
       },
       "Tags": [
         {
           "Key": "Server Instance",
           "Value": {
             "Ref": "AWS::StackId"
           }
         },
         {
           "Key": "Name",
           "Value":"WebServer-DVWA1"
         }
       ],
       "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -xe\n",

           "# Install the files and packages from the metadata\n",
           "apt-get -y update\n",
           "apt-get -y install python-setuptools\n",
           "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
           "cfn-init -v ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource WebServer1",
           "         --region ", { "Ref" : "AWS::Region" },
           "\n",
           "# Signal the status from cfn-init\n",
           "cfn-signal -e $? ",
           "         --stack ", { "Ref": "AWS::StackName" },
           "         --resource WebServer1",
           "         --region ", { "Ref": "AWS::Region" },
           "\n"
       ]]}},
       "NetworkInterfaces": [
         {
           "GroupSet": [
             {
               "Ref": "InstanceSecurityGroup"
             }
           ],
           "Description": "Server:Subnet",
           "AssociatePublicIpAddress": "true",
           "DeviceIndex": "0",
           "DeleteOnTermination": "true",
           "SubnetId": {
             "Ref": "Subnet"
           }
         }
       ]
     },
     "CreationPolicy": {
         "ResourceSignal": {
             "Timeout": "PT15M"
         }
     }
   },
   "WebServerDVWA2": {
       "Type": "AWS::EC2::Instance",
       "Metadata": {
         "AWS::CloudFormation::Init" : {
          "config": {
            "commands" : {
              "a_update_host": { "command": "apt-get -y update"},
              "b_setup_ubuntu_password": { "command": "sh -c 'echo \"ubuntu:supernetops\" | chpasswd'"},
              "c_setup_docker1": {"command": "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"},
              "c_setup_docker2": {"command": "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\""},
              "c_setup_docker3": {"command": "sudo apt-get -y update"},
              "c_setup_docker4": {"command": "sudo apt-get install -y docker-ce"},
              "c_setup_docker5": {"command": "usermod -aG docker ubuntu"} ,
              "d_run_docker_dvwa": {"command": "docker run -d --rm -p 80:80 vulnerables/web-dvwa"}
              }
          }
         }
       },
       "Properties": {
         "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
               ]
            }
           ]
         },
         "InstanceType": {
           "Ref": "InstanceType"
         },
         "BlockDeviceMappings" : [{
                 "DeviceName" : "/dev/sda1",
                 "Ebs" : {"VolumeSize" : {"Ref" : "EBSVolumeSize"}}
         }],
         "KeyName": {
           "Ref": "KeyName"
         },
         "Tags": [
           {
             "Key": "Server Instance",
             "Value": {
               "Ref": "AWS::StackId"
             }
           },
           {
             "Key": "Name",
             "Value":"WebServerDVWA2"
           }
         ],
         "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
 
             "# Install the files and packages from the metadata\n",
             "apt-get -y update\n",
             "apt-get -y install python-setuptools\n",
             "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
             "cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServer2",
             "         --region ", { "Ref" : "AWS::Region" },
             "\n",
             "# Signal the status from cfn-init\n",
             "cfn-signal -e $? ",
             "         --stack ", { "Ref": "AWS::StackName" },
             "         --resource WebServer2",
             "         --region ", { "Ref": "AWS::Region" },
             "\n"
         ]]}},
         "NetworkInterfaces": [
           {
             "GroupSet": [
               {
                 "Ref": "InstanceSecurityGroup"
               }
             ],
             "Description": "Server:Subnet",
             "AssociatePublicIpAddress": "true",
             "DeviceIndex": "0",
             "DeleteOnTermination": "true",
             "SubnetId": {
               "Ref": "Subnet"
             }
           }
         ]
       },
       "CreationPolicy": {
           "ResourceSignal": {
               "Timeout": "PT15M"
           }
       }
     }
 },
 "Outputs": {
   "Region" : {
     "Description" : "AWS Region",
     "Value" : { "Ref" : "AWS::Region" }
   }
 }
}